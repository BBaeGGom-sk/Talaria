include api_backends.conf;
include api_keys.conf;

limit_req_zone $http_apikey zone=apikey_5rs:1m rate=5r/s;

server {
    # Logs
    include custom_format.d/date_format.conf;
    include custom_format.d/log_format.conf;

    open_log_file_cache max=1000 inactive=20s valid=1m;

    access_log  /var/log/nginx/access_talaria.log                   talaria_log_format;
    access_log  /var/log/nginx/access_current.log           talaria_log_format;
    access_log  /var/log/nginx/access_200_$talaria_time.log talaria_log_format if=$api_success;
    access_log  /var/log/nginx/access_400_$talaria_time.log talaria_log_format if=$api_fail;
    access_log  /var/log/nginx/access_500_$talaria_time.log talaria_log_format if=$api_serverfail;

    error_log   /var/log/nginx/error.log;
    error_log   /var/log/nginx/erorr_current.log;

    listen 443 ssl;
	server_name api.talaria.kr;

    # TLS config
    ssl_certificate      /usr/share/nginx/certs/fullchain.pem;
    ssl_certificate_key  /usr/share/nginx/certs/privkey.pem;
    ssl_session_cache    shared:SSL:10m;
    ssl_session_timeout  5m;
    ssl_ciphers          HIGH:!aNULL:!MD5;
    ssl_protocols        TLSv1.2 TLSv1.3;

    # API definitions, one per file
    include api_conf.d/*.conf;

    # Error responses
    error_page 404 = @400;         # Invalid paths are treated as bad requests
    proxy_intercept_errors on;     # Do not send backend errors to the client
    include api_json_errors.conf;  # API client friendly JSON error responses
    default_type application/json; # If no content-type then assume JSON

    # API key validation
    location = /_validate_apikey {
        internal;

        if ($http_apikey = "") {
            return 401; # Unauthorized
        }
        if ($api_client_name = "") {
            return 403; # Forbidden
        }

        return 204; # OK (no content)
    }
}

js_import json_validation.js;
js_set $json_validated json_validation.parseRequestBody;

server {
    listen 127.0.0.1:10415;
    return 415; # Unsupported media type
    include api_json_errors.conf;
}

# vim: syntax=nginx