version: "3.8"

volumes:
  talaria.d:
  log_current.d:
  log_old.d:

secrets:
  nginx.fullchain:
    file: ./setup/certbot/conf/live/${DATA_PLANE_DOMAIN}/fullchain.pem
  nginx.privkey:
    file: ./setup/certbot/conf/live/${DATA_PLANE_DOMAIN}/privkey.pem

services:
  configurator:
    container_name: configurator
    image: python:${PYTHON_VERSION}
    environment:
      MODE: test
      CONTROL_PLANE_DOMAIN: ${CONTROL_PLANE_DOMAIN}
      DESCRIBING_SERVICE_URI: ${DESCRIBING_SERVICE_URI}
      DATA_PLANE_DOMAIN: ${DATA_PLANE_DOMAIN}
    restart: unless-stopped
    volumes:
      - ./configurator:/code:ro
      - ./nginx/api_gateway.conf:/nginx/api_gateway.conf
      - talaria.d:/nginx/talaria.d
    working_dir: /code
    entrypoint: /code/entrypoint.sh
    depends_on:
      - nginx
    pid: "container:nginx"
    ports:
      - "${CONFIGURATOR_PORT}:${CONFIGURATOR_PORT}"

  nginx:
    container_name: nginx
    image: nginx:${NGINX_VERSION}
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/api_gateway.conf:/etc/nginx/api_gateway.conf
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - talaria.d:/etc/nginx/talaria.d
      - log_current.d:/var/log/nginx
    secrets:
      - source: nginx.fullchain
        target: /usr/share/nginx/certs/fullchain.pem
      - source: nginx.privkey
        target: /usr/share/nginx/certs/privkey.pem
    depends_on:
      - logrotate
    ports:
      - 80:80
      - 443:443

  monitoring:
    container_name: monitoring
    image: openjdk:11-jdk
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./monitoring:/home/libs
      - log_current.d:/var/log/nginx/shared
      - log_current.d:/var/log/nginx/olds
    command:
      - /home/libs/entrypoint.sh
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - ${MONITORING_PORT}:${MONITORING_PORT}

  postgres:
    container_name: postgres
    image: postgres:${POSTGRES_VERSION}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_ROOT_PASSWORD: ${POSTGRES_ROOT_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: unless-stopped
    volumes:
      - ./database/postgres_init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/postgres/data:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}

  logrotate:
    container_name: logrotate
    image: blacklabelops/logrotate:1.3
    volumes:
      - log_current.d:/logrotate/shared
      - log_old.d:/logrotate/olds
    environment:
      LOGS_DIRECTORIES: /logrotate/shared
      LOGROTATE_INTERVAL: hourly
      LOGROTATE_COPIES: 24
      LOGROTATE_OLDDIR: /logrotate/olds
